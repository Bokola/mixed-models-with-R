[
["index.html", "Mixed Models in R", " Mixed Models in R Michael Clark https://m-clark.github.io/workshops/mixed_models_r/ 2017-12-11 "],
["introduction.html", "Introduction Overview Initial Steps Key packages", " Introduction Overview Mixed models are an extremely useful modeling tool for situations in which there is some dependency among observations in the data, where the correlation typically arises from the observations being clustered in some way. For example, it is quite common to have data in which we have repeated measurements for the units of observation, or in which the units of observation are otherwise clustered (e.g. students within school, cities within geographic region). While there are different ways to approach such a situation, mixed models are a very common and powerful tool to do so. In addition, they have ties to other statistical approaches that further expand their applicability. Goals This document serves as the basis for a workshop. The goal of the workshop is primarily to provide a sense of when one would use mixed models and a variety of standard techniques to implement them. Additionally, we’ll have exercises to practice. Prerequisites The document is for the most part very applied in nature, and only assumes a basic understanding of standard regression models. Use of R for regression modeling is also assumed, though there will be some review. Demonstrations will be done almost entirely with the lme4 package. Note the following color coding used in this document: emphasis package function object/class link Initial Steps Download the zip file at http://m-clark.github.io/workshops/mixed_models_r/mem_workshop.zip. Be mindful of where you put it. Unzip it. Be mindful of where you put the resulting folder. Open RStudio. File/Open Project and click on the blue icon in the folder you just created. File/Open Click on the ReadMe file and do what it says. Key packages To run the code in this document you’ll really only need the following: lme4 tidyverse (for data processing) merTools (optional) modelr (optional) nlme (part of base R, no need for install) "],
["mixed-models.html", "Mixed Models Terminology Kinds of clustering Random Intercepts model Example: student GPA The standard regression model The mixed model Application Cluster level covariate Summary Exercises", " Mixed Models While they might be new to you, mixed models have been around a long time. For example, standard ANOVA methods can be seen as special cases of a mixed model. More recently, mixed models have a variety of applications and extensions, allowing them to encompass a diverse range of data situations. They can be seen as a first step in expanding one’s toolset beyond the generalized linear model. Terminology For the uninitiated, the terminology surrounding mixed models, especially across disciplines, can be a bit confusing. Some terms you might come across regarding these types of models include: Variance components Random intercepts and slopes Random effects Random coefficients Varying coefficients Intercepts- and/or slopes-as-outcomes Hierarchical linear models Multilevel models (implies multiple levels of hierarchically clustered data) Growth curve models (possibly Latent GCM) Mixed effects models All describe types of mixed models. Some might be more historical, others are more often seen in a specific discipline, others might refer to a certain data structure, and still others are special cases. Mixed effects, or simply mixed, models generally refer to a mixture of fixed and random effects. For the models in general, I prefer the terms ‘mixed models’ or ‘random effects models’ because they are simpler terms, no specific structure is implied, and the latter can also apply to extensions that many would not think of when other terms are used1. Regarding the mixed effects, fixed effects is perhaps a poor but nonetheless stubborn term for the typical main effects one would see in a linear regression model, i.e. the non-random part of a mixed model, and in some contexts they are referred to as the population average effect. Though you will hear many definitions, random effects are simply those specific to an observational unit, however defined. The approach outlined in this document largely pertains to the case where the observational unit is the level of some grouping factor, but this is only . Kinds of clustering Data might have one or multiple sources of clustering, and that clustering may be hierarchical, such that clusters are nested within other clusters. An example would be scholastic aptitude tests given multiple times to students (repeated observations nested within students, students nested within schools, schools nested within districts). In other cases, there is no nesting structure. An example would be a reaction time experiment where participants perform the same set of tasks. While observations are nested within individual, observations are also clustered according to task type. Some use the terms nested and crossed to distinguish between these scenarios. In addition clustering may be balanced or not. We might expect more balance in studies of an experimental nature, but definitely not in other cases, e.g. where the cluster is something like geographical unit and the observations are people. In what follows we’ll see mixed effect models in all these data situations. In general, our approach will be the same, as such clustering is really more a property of the data than the model. However, it’s important to get a sense of the flexibility of mixed models to handle a variety of data situations. Random Intercepts model For the following we’ll demonstrate the simplest2 and most common case of a mixed model, that in which we have a single grouping structure for the random effect added to the standard regression situation. For reasons that will hopefully become clear soon, this is commonly called a random intercepts model. We will also see an extension of it later. Example: student GPA For the following we’ll assess factors predicting college grade point average (GPA). Each of the 200 students is assessed for six occasions (each semester for the first three years), so we have observations nested within students. We have other variables such as job status, sex, and high school GPA. Some will be in both labeled and numeric form. See the appendix for more detail. The standard regression model Now for the underlying model. We can show it in a couple different ways. First we start with just a standard regression to get our bearings. \\[\\mathscr{gpa} = b_{\\mathrm{intercept}} + b_{\\mathrm{occ}}\\cdot \\mathscr{occasion} + \\epsilon\\] We have coefficients for the intercept and the effect of time. The error \\(\\epsilon\\) is assumed to be normally distributed with mean 0 and some standard deviation \\(\\sigma\\). \\[\\epsilon \\sim \\mathscr{N}(0, \\sigma)\\] An alternate way to write the model which puts emphasis on the underlying data generating process for \\(y\\) can be shown as follows. \\[\\mathscr{gpa} \\sim \\mathscr{N}(\\mu, \\sigma)\\] \\[\\mu = b_{\\mathrm{intercept}} + b_{\\mathrm{occ}}\\cdot \\mathscr{occasion}\\] More technically, the gpa and \\(\\mu\\) variables have an implicit subscript to denote each observation, but you can also think of it as a model for a single individual at a single time point. The mixed model Initial depiction Now we show one way of showing it as a mixed model that includes a unique effect for each student. Consider the following model for a single student3. This depiction shows that the student-specific effect can be seen as an additional source of variance. \\[\\mathscr{gpa} = b_{\\mathrm{intercept}} + b_{\\mathrm{occ}}\\cdot \\mathscr{occasion} + (\\mathrm{effect}_{\\mathscr{student}} + \\epsilon)\\] We (usually) assume the following for the student effects. \\[\\mathrm{effect}_{\\mathrm{student}} \\sim \\mathscr{N}(0, \\tau)\\] Thus the student effects are random, and specifically are normally distributed with mean of zero and some estimated standard deviation. In other words, conceptually the only difference between this mixed model and a standard regression is the student effect, which is on average no effect, but specifically varies from student to student with some standard deviation (\\(\\tau\\)). If we rearrange it, we can instead focus on model coefficients. \\[\\mathscr{gpa} = (b_{\\mathrm{intercept}} + \\mathrm{effect}_{\\mathscr{student}}) + b_{\\mathrm{occ}}\\cdot \\mathscr{occasion} + \\epsilon\\] Or more succinctly: \\[\\mathscr{gpa} = b_{\\mathrm{int\\_student}} + b_{\\mathrm{occ}}\\cdot \\mathscr{occasion} + \\epsilon\\] In this way, we’ll have student-specific intercepts, as each person will have their own unique effect added to the overall intercept, resulting in a different intercept for each person. \\[b_{\\mathrm{int\\_student}} \\sim \\mathscr{N}(b_{\\mathrm{intercept}}, \\tau)\\] Now we see the intercepts as normally distributed with a mean of the overall intercept and some standard deviation. As such this is often called a random intercepts model. As a multi-level model A form of that second depiction is commonly seen in the multilevel modeling literature. It is shown more explicitly as a two part regression model, one at the observation level and one at the student level. \\[\\mathrm{gpa} = b_{\\mathrm{int\\_student}} + b_{\\mathrm{occ}}\\cdot \\mathrm{occasion} + \\epsilon\\] \\[b_{\\mathrm{int\\_student}} = b_{\\mathrm{intercept}} + \\mathrm{effect}_{\\mathrm{student}}\\] However, after ‘plugging in’ the second level part to the first, it is identical to the previous. Note how we don’t have a student-specific effect for occasion. In this context, occasion is said to be a fixed effect only, and there is no random component. This definitely does not have to be the case though, as we’ll see later. Application Initial visualization It always helps to look before we leap, so let’s do so. Here we plot GPA vs. occasion (i.e. semester) to get a sense of the variability in starting points and trends. All student paths are shown in blue, with a sample of 10 shown in orange. The overall trend as estimated by the regression we’ll do later is shown in red. Two things stand out. One is that students have a lot of variability in starting out. Secondly, while the general trend in GPA is upward over time as we’d expect, individual students may vary in that trajectory. Standard regression So let’s get started. First, we’ll look at the regression and only the time trend. Note that I present a cleaner version of the summarized objects for the purposes of this document. load(&#39;data/gpa.RData&#39;) gpa_lm = lm(gpa ~ occasion, data=gpa) ## summary(gpa_lm) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.493 0.023 108.6 0 occasion 0.106 0.006 18.04 0 Fitting linear model: gpa ~ occasion Observations Residual Std. Error \\(R^2\\) Adjusted \\(R^2\\) 1200 0.3487 0.2136 0.2129 The above tells us that starting out, i.e. when occasion is zero, the average gpa, denoted by the intercept, is 2.49. In addition, as we move from semester to semester, we can expect GPA to increase by about 0.11 points. This would be fine except that we are ignoring the clustering. A side effect of doing so is that our standard errors are incorrect, and thus claims about statistical significance based on them would be off. More importantly however is that we simply don’t get to explore the student effect, which would be of interest by itself. Regression by cluster An alternative approach would be to run separate regressions for every student. However, there are many drawbacks to this- it’s not easily summarized when there are many groups, typically there would be very little data within each cluster to do so (as in this case), and the models are over-contextualized, meaning they ignore what students have in common. We’ll compare such an approach to the mixed model later. Mixed model Next we run a mixed model that will allow for a student specific effect. Such a model is easily conducted in R, specifically with the package lme4. In the following, the code will look just like what you used for regression with lm, but with an additional component specifying the group, i.e. student, effect. The (1|student) means that we are allowing the intercept, represented by 1, to vary by student. With the mixed model, we get the same results as the regression, but with more to talk about. library(lme4) gpa_mixed = lmer(gpa ~ occasion + (1|student), data=gpa) ## summary(gpa_mixed) term estimate std.error statistic (Intercept) 2.493 0.024 104.388 occasion 0.106 0.004 26.096 grp variance sd student 0.064 0.252 Residual 0.058 0.241 First we see that the coefficients, i.e. or in this context they can be called the fixed effects, for the intercept and time are the same4 as we saw with the standard regression, as would be their interpretation. The standard errors, on the other hand are different here, though in the end our conclusion as far as statistical significance goes would be the same. However, the lme4 does not provide p-values! There are several reasons for this, namely that with mixed models we are essentially dealing with different sample sizes, the \\(N_c\\) within cluster, which may vary from cluster to cluster (and even be a single observation!), and N total observations, which puts us in kind of a fuzzy situation with regard to reference distributions, denominator degrees of freedom and how to approximate a ‘best’ solution. Other programs provide p-values automatically as if there is no issue, and without telling you which approach they use to calculate them (there are several). Furthermore, those approximations may be very poor in some scenarios, or make assumptions that may not be appropriate for the situation5. However, it’s more straightforward to get confidence intervals, and we can do so with lme4 as follows6. confint(gpa_mixed) 2.5% 97.5% student 0.225 0.282 residual 0.231 0.252 Intercept 2.446 2.54 occasion 0.098 0.114 Variance components One thing that’s new compared to the standard regression output is the estimated variance/standard deviation of the student effect (\\(\\tau\\) in our formula depiction from before). This tells us how much, on average, GPA bounces around as we move from student to student. In other words, even after making a prediction based on time point, each student has their own unique deviation, and that value (in terms of the standard deviation) is the estimated average deviation. Note that scores move due to the student more than double what they move based on a semester change. Another way to interpret the variance output is via the intraclass correlation, which tells us how much of the variance is due to the clustering. In this case it’s just the student variance out of the total, or 0.064 / 0.122 = 52%. Estimates of the random effects What’s more, we can actually get estimates of the student effects7. I show two ways for the first five students, as random effect and as random intercept (i.e. intercept + random effect). ranef(gpa_mixed)$student %&gt;% head(5) (Intercept) -0.071 -0.216 0.088 -0.187 0.030 coef(gpa_mixed)$student %&gt;% head(5) (Intercept) occasion 2.422 0.106 2.277 0.106 2.581 0.106 2.306 0.106 2.523 0.106 Note that we did not allow occasion to vary, so it is a constant, i.e. fixed, effect for all students. Often, we are keenly interested in these effects, and want some sense of uncertainty regarding them. With lme4 this typically would be done via bootstrapping, specifically with the bootMer function. However, for some users this may be a bit of a more complex undertaking. The merTools package provides for an easy way to get this with the predictInterval function8. Or you can go straight to the plot of them. library(merTools) predictInterval(gpa_mixed) plotREsim(REsim(gpa_mixed)) Prediction Let’s now examine standard predictions vs. cluster-specific predictions. As with most R models, we can use the predict function on the model object. predict(gpa_mixed, re.form=NA) %&gt;% head 1 2 3 4 5 6 2.599214 2.705529 2.811843 2.918157 3.024471 3.130786 In the above code we specified not to use the random effects re.form=NA, and as such, our predictions for the observations are pretty much what we’d get from the standard linear model. predict_no_re = predict(gpa_mixed, re.form=NA) predict_lm = predict(gpa_lm) But each person has their unique intercept, so let’s see how the predictions differ when we incorporate that information. predict_with_re = predict(gpa_mixed) The following shows the unconditional prediction vs. the conditional prediction that incorporates the random intercept for the first two students. We can see that the predictions from the mixed model are shifted because of having a different intercept. For these students, the shift reflects their relatively poor start. Cluster level covariate Note our depiction of a mixed model as a multilevel model. \\[\\mathrm{gpa} = b_{\\mathrm{int\\_student}} + b_{\\mathrm{occ}}\\cdot \\mathrm{occasion} + \\epsilon\\] \\[b_{\\mathrm{int\\_student}} = b_{\\mathrm{intercept}} + \\mathrm{effect}_{\\mathrm{student}}\\] If we add student a student level covariate, e.g sex, to the model, we then have the following. \\[b_{\\mathrm{int\\_student}} = b_{\\mathrm{intercept}} + b_{sex}\\cdot \\mathrm{sex} + \\mathrm{effect}_{\\mathrm{student}}\\] Which, after plugging in, we still have the same model as before, just with an additional predictor. \\[\\mathrm{gpa} = b_{\\mathrm{intercept}} + b_{\\mathrm{occ}}\\cdot \\mathrm{occasion}+ b_{sex}\\cdot \\mathrm{sex} + (\\mathrm{effect}_{\\mathscr{student}} + \\epsilon)\\] Thus, adding cluster level covariates doesn’t have any unusual effect on how we think about the model9. We simply add them to our set of predictor variables. Note also, that we can create cluster level covariates as means or some other summary of the observation level variables. This is especially common when the clusters represent geographical units and observations are people. For example, we might have income as a person level covariate, and use the median to represent the overall wealth of the geographical region. Summary Mixed models allow for us to take into account clustering in the data. If this were all it was used for, we would have more accurate inference relative to what would be had if we ignored the structure in the data. However, we get much more. We better understand the sources of variability in the target variable. We also get group specific estimates of the parameters in the model, allowing us to understand exactly how the groups differ from one another. Furthermore, this in turn allows for group specific prediction, and thus much more accurate prediction, assuming there is appreciable variance due to the clustering. In short, there is much to be gained by mixed models, even in the simplest of settings. Exercises Sleep For this exercise, we’ll use the sleep study data from the lme4 package. The following describes it. The average reaction time per day for subjects in a sleep deprivation study. On day 0 the subjects had their normal amount of sleep. Starting that night they were restricted to 3 hours of sleep per night. The observations represent the average reaction time (in milliseconds) on a series of tests given each day to each subject. After loading the package, the data can be loaded as follows. I show the first few observations. library(lme4) data(&quot;sleepstudy&quot;) Reaction Days Subject 249.6 0 308 258.7 1 308 250.8 2 308 321.4 3 308 356.9 4 308 414.7 5 308 Run a regression with Reaction as the target variable and Days as the predictor. Run a mixed model with a random intercept for Subject. Interpret the variance components and fixed effects. Cluster level covariate Rerun the mixed model with the GPA data adding the cluster level covariate of sex, or high school GPA (highgpa), or both. Interpret all aspects of the results. What happened to the student variance after adding cluster level covariates to the model? Simulation The following represents a simple way to simulate a random intercepts model. Note each object what each object is, and make sure the code make sense to you. Then run it. set.seed(1234) # this will allow you to exactly duplicate your result Ngroups = 100 NperGroup = 3 N = Ngroups*NperGroup groups = factor(rep(1:Ngroups, each=NperGroup)) u = rnorm(Ngroups, sd=.5) e = rnorm(N, sd=.25) x = rnorm(N) y = 2 + .5*x + u[groups] + e d = data.frame(x, y, groups) Which of the above represent the fixed and random effects? Now run the following. model = lmer(y ~ x + (1|groups), data=d) summary(model) confint(model) library(ggplot2) ggplot(aes(x, y), data=d) + geom_point() Do the results seem in keeping with what you expect? In what follows we’ll change various aspects of the data, then rerun the model after each change, then summarize and get confidence intervals as before. For each note specifically at least one thing that changed in the results. First calculate or simply eyeball the intraclass correlation coefficient \\(\\frac{\\textrm{random effect variance}}{\\textrm{residual + random effect variance}}\\). In addition, create a density plot of the random effects as follows. re = ranef(model)$groups qplot(x=re, geom=&#39;density&#39;, xlim=c(-3,3)) Change the random effect variance/sd and/or the residual variance/sd and note your new estimate of the ICC, and plot the random effect as before. Reset the values to the original. Change Ngroups to 50. What differences do you see in the confidence interval estimates? Set the Ngroups back to 100. Now change NperGroup to 10, and note again the how the CI is different from the base condition. I actually like Richly Parameterized Linear Models, or Structured Additive Regression Models. Both are a mouthful, but at least the latter reduces to STARs.↩ Actually, the simplest model would have no covariates at all, just variance components, with no correlations among the random effects. Such a model can be interesting to look at while exploring your data, but would probably never suffice on its own to tell the story you desire to.↩ Note that I leave out the observation level subscript to keep things clean. I find that multilevel style notation quickly becomes unwieldy, and don’t wish to reproduce it. It also tends to add confusion to a lot of applied researchers starting out with mixed models.↩ This will not always be the case, e.g. with unbalanced data, but they should be fairly close.↩ Note that many common modeling situations involve a fuzzy p setting, but especially penalized regression approaches such as mixed, additive, ridge regression models etc. Rather than be a bad thing, this usually is a sign you’re doing something interesting, or handling complexity in an appropriate way.↩ See ?confint.merMod for details and options.↩ These are sometimes referred to as BLUPs or EBLUPs, which stands for (empirical) best linear unbiased prediction. However, they are only BLUP for linear mixed effects models. As such you will also see them referred to as conditional mode. Furthermore, in the Bayesian context, the effects are actually estimated as additional model parameters, rather than estimated/predicted after the fact.↩ Note that while predictionInterval does not quite incorporate all sources of uncertainty as does bootMer, it’s actually feasible for larger data sets, and on par with the Bayesian results (e.g. with rstanarm).↩ This is why the multilevel depiction is subpar, and leads many to confusion at times. You have a target variable and predictor variables based on theory. Whether they are cluster level variables or if there are interactions doesn’t have anything to do with the data structure as much as it does the theoretical motivations. However, if you choose to depict the model in multilevel fashion, the final model must adhere to the ‘plugged in’ result. So if, for example, you posit a cluster level variable for a random slope, you must include the implied interaction of the cluster level and observation level covariates. The HLM software goes so far as to even require a separate data set pertaining to cluster level covariates, which is completely unnecessary in R, Stata, SAS etc.↩ "],
["more-random-effects.html", "More Random Effects Application Comparison to many regressions Visual prediction Summary Exercises", " More Random Effects Previously we’ve looked at random intercepts, but any observation level covariate effect could be allowed to vary by cluster as well. Application Returning to the GPA data, recall the visualization from before. Let us now assume that the trend over time is allowed to vary by student. Using lme4, this is quite straightforward. gpa_mixed = lmer(gpa ~ occasion + (1 + occasion|student), data=gpa) summary(gpa_mixed) Pretty easy huh? To the left of that bar we are simply just positing a formula as we do with most modeling functions10. Let’s look at the results. term estimate std.error statistic conf.low conf.high (Intercept) 2.493 0.021 118.018 2.451 2.534 occasion 0.106 0.006 18.066 0.095 0.118 grp re variance sd student (Intercept) 0.053 0.229 student occasion 0.005 0.067 Residual 0.042 0.206 As before, since we have 0 as our starting semester, the intercept tells us what the average GPA is in the first semester. The coefficient for occasion still reflects a one semester change in GPA. As we have not changed the fixed effect portion of the model, the values are the same as before. The associated intercept variance tells us how much that starting GPA bounces around from student to student. The variance for the occasion effect might not look like much in comparison, but slopes are on a notably different scale than the intercept. Note that the mean slope for the semester to semester effect, our fixed effect, is 0.11, but from student to student it bounces around half that. Thus we could expect most students to fall somewhere between a flat effect of zero to more than double the population average11. Yet another point of interest is the correlation of the intercepts and slopes. In this case it’s -0.38. That’s pretty small, but the interpretation is the same as with any correlation. In this case specifically, it tells us that those with lower intercepts would be associated with increased time trajectories. This makes intuitive sense in that people are improving in general, and those at the bottom would have more room to improve. However, this is very slight, and practically speaking we might not put too much weight on it. Comparison to many regressions Let’s compare these results to the ones we would have gotten had we run a separate regression for each student. In what follows we see the distribution of of the estimated intercept and slope coefficients for all the students. Here we can see that the mixed model intercepts are generally not as extreme, i.e. the tails of the distribution have been pulled toward the overall effect. Same goes for the slopes. In both cases the mixed model shrinks what would have been the by-group estimate, which would otherwise overfit in this scenario. This regularizing effect is yet another bonus when using mixed models12. It comes into play largely when we have few observations per group and less estimated variance for the random effects. In other words, when there is little information in a group, or less group-level variance relative to the observation variance, then the mixed model will produce a group-specific effect that is closer to the overall population effect. In that sense, the mixed model group coefficients better reflect our ignorance. Visual prediction Let’s compare our results visually. First there is the linear regression fit. We assume the same trend for everyone. If we add the conditional predictions that include the subject specific effects from the mixed model, we now can also make subject specific predictions, greatly enhancing the practical use of the model. As the code to create this plot (using plotly) was very easy, I go ahead and show it. gpa %&gt;% modelr::add_predictions(gpa_lm, var=&#39;lm&#39;) %&gt;% modelr::add_predictions(gpa_mixed, var=&#39;mixed&#39;) %&gt;% group_by(student) %&gt;% plot_ly %&gt;% add_lines(x=~occasion, y=~lm, opacity=1, color=I(&#39;#ff5500&#39;), name=&#39;Standard\\nRegression&#39;) %&gt;% add_lines(x=~occasion, y=~mixed, opacity=.2, color=I(&#39;#03b3ff&#39;), name=&#39;Mixed\\nModel&#39;) %&gt;% theme_plotly() By contrast, the by-group approach is more noisy due to treating everyone independently. Many more students are expected to have downward or flat trends relative to the mixed model (the mixed model only had 3 trends estimated to be negative). Summary At this point it might be clearer why some would call these richly parameterized linear models. Relative to a standard regression we get extra variance parameters that add to our understanding of the sources of uncertainty in the model, we can get the subjects specific effects, their correlation, and use that information to obtain far better predictions. What’s not to like? Exercises Sleep revisited Run the sleep study model with random coefficient for the Days effect, and interpret the results. What is the correlation between the intercept and Days random effects? Use the ranef and coef functions on the model you’ve created to inspect the individual specific effects. What do you see? library(lme4) data(&quot;sleepstudy&quot;) In the following replace model with the name of your model object. Run each line, inspecting the result of each as you go along. re = ranef(model)$Subject fe = fixef(model) apply(re, 1, function(x) x + fe) %&gt;% t The above code adds the fixed effects to each row of the random effects (the t just transposes the result). What is the result compared to what you saw before? Simulation revisited The following shows a simplified way to simulate some random slopes, but otherwise is the same as the simulation before. Go ahead and run the code. set.seed(1234) # this will allow you to exactly duplicate your result Ngroups = 50 NperGroup = 3 N = Ngroups*NperGroup groups = factor(rep(1:Ngroups, each=NperGroup)) re_int = rnorm(Ngroups, sd=.75) re_slope = rnorm(Ngroups, sd=.25) e = rnorm(N, sd=.25) x = rnorm(N) y = (2 + re_int[groups]) + (.5 + re_slope[groups])*x + + e d = data.frame(x, y, groups) This next bit of code shows a way to run a mixed model while specifying that there is no correlation between intercepts and slopes. There is generally no reason to do this unless the study design warrants it13, but you could do it as a step in the model-building process, such that you fit a model with no correlation, then one with it. model_ints_only = lmer(y ~ x + (1|groups), data=d) model_with_slopes = lmer(y ~ x + (1|groups) + (0 + x|groups), data=d) summary(model_with_slopes) confint(model_with_slopes) library(ggplot2) ggplot(aes(x, y), data=d) + geom_point() Compare model fit using the AIC function, e.g. AIC(model). The model with the lower AIC is the better model, so which would you choose? Technically the intercept is assumed but you should keep it for clarity.↩ In case it’s not clear, I’m using the fact that we assume a normal distribution for the random effect of occasion. A quick rule of thumb for a normal distribution is that 95% falls between \\(\\pm\\) 2 standard deviations of the mean.↩ This phenomenon is also sometimes referred to as partial pooling. This idea of pooling is as in pooling resources or borrowing strength. You have complete pooling, which would be the standard regression model case of ignoring the clusters. No pooling, which assumes the clusters have nothing in common, i.e. the separate regressions approach. Partial pooling is seen the mixed model scenario, where the similarity among the clusters is estimated in some fashion, and data for all observations informs the estimates for each cluster. I’ve never really liked the ‘pooling’ terminology, as regularization is a more broad concept that applies beyond mixed models, and I’d prefer to stick to that. In any case, see the pool-no-pool document here.↩ I personally have not come across a situation where I’d do this in practice. Even if the simpler model with no correlation was a slightly better fit, there isn’t much to be gained by it.↩ "],
["common-extensions.html", "Common Extensions Additional Grouping Structure Residual Structure Generalized Linear Mixed Models Exercises", " Common Extensions Additional Grouping Structure Cross-classified models Oftentimes there will be additional sources of variance beyond one grouping factor. Consider as an example, a visual perception experiment where there are multiple trials for each individual along with specific images displayed. Such data might look like this. In such a case we have observations clustered within both person and image, but person and image are not nested within one another- all participants see all 10 items. Such a situation is typically referred to as one in which there are crossed random effects. In such settings we have multiple sources variances to consider. Example: Student achievement For our own demonstration we’ll look at achievement scores for students. The sources of dependency are due to students having gone to the same primary or secondary schools. However, in this example, going to a primary school doesn’t necessarily mean you’ll go to a specific secondary school. Note also that there are no repeated measures, we see each student only one. Here’s a quick look a the data, and for more detail, check the appendix. load(&#39;data/pupils.RData&#39;) For our mixed model we’ll look at the effects for sex and socioeconomic status, ses, a six level variable from low to high, on scholastic achievement. The range of achievement scores is roughly 4 to 10, with mean of 6.3 and standard deviation 0.9. We’ll take into account the clustering at primary school and secondary school. To incorporate the additional structure in lme4 syntax is very easy, we just do as we did before for both grouping factors14. pupils_crossed = lmer(achievement ~ sex + ses + (1|primary_school_id) + (1|secondary_school_id), data = pupils) ## summary(pupils_crossed, correlation=F) term estimate std.error statistic conf.low conf.high (Intercept) 5.92 0.12 48.30 5.68 6.16 sexfemale 0.26 0.05 5.72 0.17 0.35 ses2 0.13 0.12 1.12 -0.10 0.36 ses3 0.10 0.11 0.89 -0.12 0.31 ses4 0.30 0.10 2.85 0.09 0.50 ses5 0.35 0.10 3.51 0.16 0.55 seshighest 0.62 0.11 5.60 0.40 0.83 The fixed effects tell us there is a positive effect of being female on achievement, and in general, relative to lowest SES category, being in the upper categories of SES also has a positive effect. grp var1 variance sd primary_school_id (Intercept) 0.17 0.42 secondary_school_id (Intercept) 0.07 0.26 Residual 0.47 0.69 When we look at the variance components we see that primary and secondary school contributes about 34% of the total variance. Most of the variance attributable to school comes from the primary school. If we inspect the random effects, we can see that we now have two sets of effects- 50 for the primary schools, and 30 for the secondary. Both would be incorporated into any pupil-specific prediction. glimpse(ranef(pupils_crossed)) List of 2 $ primary_school_id :&#39;data.frame&#39;: 50 obs. of 1 variable: ..$ (Intercept): num [1:50] -0.327 0.183 0.52 0.474 0.253 ... $ secondary_school_id:&#39;data.frame&#39;: 30 obs. of 1 variable: ..$ (Intercept): num [1:30] -0.41069 0.08247 -0.00589 -0.06162 0.08481 ... - attr(*, &quot;class&quot;)= chr &quot;ranef.mer&quot; Let’s look at them visually using merTools. Note that we have the usual extensions here if desired. As an example, we could also do random slopes for student level characteristics. Hierarchical Structure Now that we have looked at cross-classified models, we can examine hierarchical cluster structuring. In this situation we have clusters nested within other clusters, which may be nested within still other clusters. A typical example might be cities within counties, and counties within states. Example: Nurses and Stress For our demonstration we’ll use the nurses data set. Here we are interested in the effect of a training program (treatment) on stress levels (on a scale of 1-7) of nurses. In this scenario, nurses are nested within wards, which themselves are nested within hospitals, so we will have random effects pertaining to ward (within hospital) and hospital. For more information see the appendix. load(&#39;data/nurses.RData&#39;) For the model we examine effects of the treatment as well as several other covariates, at least one at each of the nurse, ward, and hospital levels. Again, when it comes to the fixed effects portion, you can simply think about that part as you would any standard regression, we just add covariates as theory/exploration would suggest. To incorporate this type of random effects structure is not too different from the cross-classified approach, but does have a slight change to the syntax. nurses_hierarchical = lmer(stress ~ age + sex + experience + treatment + wardtype + hospsize + (1|hospital) + (1|hospital:wardid), data = nurses) ## nurses_hierarchical = lmer(stress ~ age + sex + experience ## + treatment + wardtype + hospsize ## + (1|hospital/wardid), data = nurses) # same thing! ## summary(nurses_hierarchical, correlation=F) term estimate std.error statistic conf.low conf.high (Intercept) 5.38 0.18 29.13 5.02 5.74 age 0.02 0.00 10.05 0.02 0.03 sexFemale -0.45 0.03 -12.95 -0.52 -0.38 experience -0.06 0.00 -13.78 -0.07 -0.05 treatmentTraining -0.70 0.12 -5.84 -0.93 -0.47 wardtypespecial care 0.05 0.12 0.42 -0.18 0.29 hospsizemedium 0.49 0.20 2.43 0.09 0.88 hospsizelarge 0.90 0.27 3.28 0.36 1.44 As far as the fixed effects go, about the only thing that doesn’t have a statistical effect is ward type15. grp var1 variance sd hospital:wardid (Intercept) 0.337 0.580 hospital (Intercept) 0.119 0.345 Residual 0.217 0.466 Concerning the random effects, there appears to be quite a bit of variability from ward to ward especially, but also hospital. Recall that stress is a 7 point scale, so from ward to ward we can expect scores to bounce around about half a point on average, which is quite dramatic in my opinion. Again we inspect it visually. Crossed vs. Nested The following shows the difference in the results from treating ward as nested vs. crossed. Notice anything different? nurses_hierarchical = lmer(stress ~ age + sex + experience + treatment + wardtype + hospsize + (1|hospital) + (1|hospital:wardid), data = nurses) nurses_crossed = lmer(stress ~ age + sex + experience + treatment + wardtype + hospsize + (1|hospital) + (1|wardid), data = nurses) grp var1 variance sd hospital:wardid (Intercept) 0.337 0.580 hospital (Intercept) 0.119 0.345 Residual 0.217 0.466 grp var1 variance sd wardid (Intercept) 0.337 0.580 hospital (Intercept) 0.119 0.345 Residual 0.217 0.466 No? Good, you’re not crazy. Here’s a quote from the lme4 text, section 2.2.1.1, which is definitely worth your time. The blurring of mixed-effects models with the concept of multiple, hierarchical levels of variation results in an unwarranted emphasis on ‘levels’ when defining a model and leads to considerable confusion. It is perfectly legitimate to define models having random effects associated with non-nested factors. The reasons for the emphasis on defining random effects with respect to nested factors only are that such cases do occur frequently in practice, and that some of the computational methods for estimating the parameters in the models can only be easily applied to nested factors. This is not the case for the methods used in the lme4 package. Indeed there is nothing special done for models with random effects for nested factors. When random effects are associated with multiple factors, exactly the same computational methods are used whether the factors form a nested sequence or are partially crossed or are completely crossed. See this discussion also, as well as this from the FAQ from one of the lme4 developers. Josh Errickson at CSCAR also has a nice write-up with visual depiction of the underlying matrices of interest, which served as inspiration for some of the visualization in the next section. So there you have it. When it comes to lme4, crossed vs. nested is simply a state of mind (data)16. Residual Structure Sometimes we will want to obtain more specific estimates regarding the residual covariance/correlation structure. This is especially the case in the longitudinal setting, where we think that observations closer in time would be more strongly correlated than those further apart, or that the variance changes over time. What does this model look like? Let’s begin by thinking about the covariance matrix/correlation matrix for the entire set of observations for our target variable, and how we want to represent the dependency in those observations. I’ll show a visualization of the first 5 people from our GPA data and modeling situation. Recall that each person has 6 observations. This display regards our random intercepts (only) model for GPA. Each block represents the covariance matrix pertaining to an individual. Within the person there are variances on the diagonal and covariances on the off-diagonal. When considering the whole data, we can see that observations from one person have no covariance with another person (gray). Furthermore, the covariance within a person is a constant value. Furthermore the variance is also a constant value. Where did those values come from? grp variance sd student 0.064 0.252 Residual 0.058 0.241 Remember that there are two sources of variance in this model, the residual observation variance and that pertaining to person. Combined they provide the total residual variance that we aren’t capturing with our covariates. In this case, it’s about 0.12, the value displayed on our diagonal. The off-diagonal is the variance attributable to student, which we alternately interpreted as an intraclass correlation (dividing by the total variance converts it to the correlation metric). Now let’s start to think about other types of covariance structures. Consider the following for an individual and three time points. \\[\\boldsymbol{y} \\sim \\mathcal{N}(\\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})\\] So we have three observations of \\(y\\) that are multivariate normally distributed. The mean \\(\\mu\\) is a function of covariates just like in standard regression. \\[\\mu = b_0 + b_1\\cdot \\mathrm{time} + b_2\\cdot x_1 ...\\] However, instead of just plopping an \\(\\epsilon\\) at the end, we want to go further in defining the entire residual variance/covariance structure for all three time points. In the simplest setting of standard regression, we have constant variance and no covariance. \\[\\Sigma = \\left[ \\begin{array}{ccc} \\sigma^2 &amp; 0 &amp; 0 \\\\ 0 &amp; \\sigma^2 &amp; 0 \\\\ 0 &amp; 0 &amp; \\sigma^2 \\\\ \\end{array}\\right]\\] Next, we can relax the assumption of equal variances. \\[\\Sigma = \\left[ \\begin{array}{ccc} \\sigma_1^2 &amp; 0 &amp; 0 \\\\ 0 &amp; \\sigma_2^2 &amp; 0 \\\\ 0 &amp; 0 &amp; \\sigma_3^2 \\\\ \\end{array}\\right]\\] Now let’s say we actually want to get at the underlying covariance/correlation. I’ll switch to the correlation representation, but you can still think of the variances as constant or separately estimated. So now we have something like this, where \\(\\rho\\) represents the residual correlation among observations. \\[\\Sigma = \\sigma^2 \\left[ \\begin{array}{ccc} 1 &amp; \\rho_1 &amp; \\rho_2 \\\\ \\rho_1 &amp; 1 &amp; \\rho_3 \\\\ \\rho_2 &amp; \\rho_3 &amp; 1 \\\\ \\end{array}\\right]\\] In this case we’d estimate a different correlation for all time point pairs (with constant variance). This is typically described as an unstructured, or simply ‘symmetric’, correlation structure. If you are familiar with repeated measures ANOVA, which is a special case of a mixed model, you may recall that the usual assumption is a sphericity, a relaxed form of compound symmetry, where all the correlations have the same value, i.e. \\(\\rho_1=\\rho_2=\\rho_3\\), and all variances are equal. Another very commonly used correlation structure is an autocorrelation structure, of lag order one, for the residuals. What this means is that we assume the residuals at one time point apart correlate with some value \\(\\rho\\), observations at two time points apart correlate \\(\\rho^2\\), and so on. As such we only need to estimate \\(\\rho\\), while the rest are then automatically determined. Here’s what it’d look like for four time points. \\[\\Sigma = \\sigma^2 \\left[ \\begin{array}{cccc} 1 &amp; \\rho &amp; \\rho^2 &amp; \\rho^3 \\\\ \\rho &amp; 1 &amp; \\rho &amp; \\rho^2 \\\\ \\rho^2 &amp; \\rho &amp; 1 &amp; \\rho \\\\ \\rho^3 &amp; \\rho^2 &amp; \\rho &amp; 1 \\\\ \\end{array}\\right]\\] If \\(\\rho\\) was estimated to be .5, it would look like the following. \\[\\Sigma = \\sigma^2 \\left[ \\begin{array}{cccc} 1 &amp; .5 &amp; .25 &amp; .06 \\\\ .5 &amp; 1 &amp; .5 &amp; .25 \\\\ .25 &amp; .5 &amp; 1 &amp; .5 \\\\ .06 &amp; .25 &amp; .5 &amp; 1 \\\\ \\end{array}\\right]\\] Again, the main point is that points further apart in time are assumed to have less correlation. Know that there are many patterns and possibilities to potentially consider, and that they are not limited to the repeated measures scenario. For example, the correlation could represent spatial structure, where units closer together geographically would be more correlated. And as noted we could also have variances that are different at each time point17. We’ll start with that for the next example. Heterogeneous Variance Unfortunately, lme4 does not provide the ability to model the residual covariance structure, at least not in a straightforward fashion, though many other mixed model packages do18. In fact, two packages that come with the basic R installation do so, mgcv and nlme. We’ll demonstrate with the latter. The nlme package will have a different random effect specification, though not too different. In addition, to estimate heterogeneous variances, we’ll need to use an additional weights argument. The following will allow each time point of occasion to have a unique estimate. library(nlme) heterovar_res = lme(gpa ~ occasion, data = gpa, random = ~1|student, weights = varIdent(form = ~1|occasion)) ## summary(heterovar_res) Linear mixed-effects model fit by REML : gpa ~ occasion Value Std.Error DF t-value p-value (Intercept) 2.493 0.029 999 87.2 0 occasion 0.106 0.004 999 26.32 0 Variance StdDev (Intercept) 0.094 0.306 Residual 0.138 0.372 Now the not-so fun part. For the values we’re interested in for this example, i.e. the variances at each occasion, nlme does not make it easy on someone to understand initially, as the output regards the way things are for estimation, not for what one would usually have to report. The variances are scaled relative to the first variance estimate, which is actually the reported residual variance in the random effects part. Additionally the values are also on the standard deviation rather than variance scale. From the default output display, we can see that variance decreases over time in this case, but the actual values are not provided. summary(heterovar_res$modelStruct) Random effects: Formula: ~1 | student (Intercept) Residual StdDev: 0.8232544 1 Variance function: Structure: Different standard deviations per stratum Formula: ~1 | occasion Parameter estimates: 1 2 3 4 5 6 1.0000000 0.8261186 0.6272415 0.4311126 0.3484013 0.4324628 Relative values are fine, I guess, but what we’d want are the actual estimates. Here’s how you can get them using the residual standard deviation to scale those values, then square them to get on the variance scale. (c(1.0000000, coef(heterovar_res$modelStruct$varStruct, unconstrained=F))*heterovar_res$sigma)^2 2 3 4 5 6 0.13815037 0.09428374 0.05435276 0.02567636 0.01676917 0.02583744 Yeah. You’ll have to look this up every time you want to do it, or just make your own function that takes the model input. Autocorrelation The following example shows the same basic model, but with the autocorrelation structure we described previously. In nlme we use the built-in corAR1 function and correlation argument similar to how we did with the weights argument. library(nlme) corr_res = lme(gpa ~ occasion, data = gpa, random = ~1|student, correlation = corAR1(form = ~occasion)) ## summary(corr_res) Linear mixed-effects model fit by REML : gpa ~ occasion Value Std.Error DF t-value p-value (Intercept) 2.49 0.026 999 94.51 0 occasion 0.107 0.005 999 20.3 0 Variance StdDev (Intercept) 0.046 0.215 Residual 0.075 0.273 Notice first that the fixed effect for occasion is the same as before. The variance estimates have changed slightly along with the variances of the fixed effects (i.e. the standard errors). The main thing is that we have a new parameter called Phi in the nlme output, that represents our autocorrelation, with value of 0.418. This suggests at least some correlation exists among the residuals for observations next to each other in time, though it diminishes quickly as observations grow further apart. Generalized Linear Mixed Models Just as generalized linear models extend the standard linear model, we can generalize (linear) mixed models to generalized linear mixed models. Furthermore, there is nothing keeping us to only exponential family, as other packages would potentially allow for many other response distributions. For this example we’ll do a logistic regression in the mixed model setting. In this case, we’ll use the speed dating data set. In the speed dating events, the experiment randomly assigned each participant to ten short dates (four minutes) with other participants. For each date, each person rated six attributes (attractive, sincere, intelligent, fun, ambitious, shared interests) of the other person on a 10-point scale and wrote down whether he or she would like to see the other person again. Our target variable is whether the participant would be willing to date the person again (decision). To keep things simple the predictors will be limited to the sex of the participant (sex), whether the partner was of the same race (samerace), and three of the attribute ratings the participant gave of their partner- attractiveness (attractive), sincerity (sincere), and intelligence (intelligent). The latter have been scaled to have zero mean and standard deviation of .5, which puts them on a more even footing with the binary covariates (_sc)19. load(&#39;data/speed_dating.RData&#39;) sd_model = glmer(decision ~ sex + samerace + attractive_sc + sincere_sc + intelligent_sc + (1|iid), data=speed_dating, family=binomial) summary(sd_model, correlation=F) term estimate std.error statistic p.value conf.low conf.high (Intercept) -0.74 0.12 -6.13 0.00 -0.98 -0.51 sexMale 0.16 0.16 0.95 0.34 -0.17 0.48 sameraceYes 0.31 0.07 4.19 0.00 0.17 0.46 attractive_sc 1.96 0.06 33.56 0.00 1.84 2.07 sincere_sc 0.31 0.05 5.75 0.00 0.20 0.42 intelligent_sc 0.44 0.05 8.23 0.00 0.34 0.55 The fixed effects results are as expected for the attributes, with attractiveness being a very strong effect in particular. In addition, having a partner of the same race had a positive effect while sex of the participant was statistically negligible. You are free to exponentiate the coefficients to get the odds ratios if desired, just as you would with standard logistic regression. grp var1 variance sd iid (Intercept) 2.71 1.65 For the variance components, notice that there is no residual variance. This is because we are not modeling with the normal distribution for the response, thus there is no \\(\\sigma\\) to estimate. However, the result suggests that there is quite a bit of variability from person to person. Exercises Sociometric data In the following data, kids are put into different groups and rate each other in terms of how much they would like to share some activity with the others. We have identifying variables for the person doing the rating (sender), the person being rated (receiver), what group they are in, as well as age and sex for both sender and receiver, as well as group size. In the following, load the sociometric data and run the following model. You will have three sources of structure to consider: senders (within group) receivers (within group) group We will proceed with the following modeling steps. For each, make sure you are creating a separate model object for each one run. Model 1: No covariates, only sender and receiver random effects. Note that even though we don’t add group yet, still use the nesting approach to specify the effects (e.g. 1|group:receiver) Model 2: No covariates, add group random effect Model 3: Add all covariates: agesend/rec, sexsend/rec, and grsize (group size) Model 4: In order to examine sex matching effects, add an interaction of the sex variables to the model sexsend:sexrec. Compare models with AIC (see the note about model comparison), e.g. AIC(model1). A lower value would indicate the model is preferred. load(&#39;data/sociometric.RData&#39;) Patents Do a Poisson mixed effect model using the patent data. Predict the number of citations (ncit) based on whether there was opposition (opposition) and if it was for the biotechnology/pharmaceutical industry (biopharm). Use year as a random effect to account for unspecified economic conditions. load(&#39;data/patents.RData&#39;) Interestingly, one can model overdispersion in a Poisson model by specifying an random intercept for each observation (subject in the data). In other words, no clustering or grouped structure is necessary. I don’t show the formal model here as we did before, but this is why depicting mixed models solely as ‘multilevel’ becomes a bit problematic in my opinion. In the standard mixed model notation it’s straightforward though, you just add an addition random effect term, just as we do in the actual model syntax.↩ Setting aside our discussion to take a turn regarding regression modeling more generally, this is a good example of ‘surprising’ effects not being so surprising when you consider them more closely. Take a look at the effect of experience. More experience means less stress, this is probably not surprising. Now look at the age effect. It’s positive! But wouldn’t older nurses have more experience? What’s going on here? When interpreting experience, it is with age held constant, thus more experience helps with lowering stress no matter what your age. With age, we’re holding experience constant. If experience doesn’t matter, being older is affiliated with more stress, which might be expected given the type of very busy and high pressure work often being done (the mean age is 43). A good way to better understand this specifically is to look at predicted values when age is young, middle, and older vs. experience levels at low, middle, and high experience, possibly explicitly including the interaction of the two in the model. Also note that if you take experience out of the model, the age effect is negative, which is expected, as it captures experience also.↩ Note that it does matter if you label your data inappropriately. For example, if in the nesting situation you start your id variable at 1 for each nested group, then you have to use the nested notation in lme4, otherwise, e.g. it won’t know that id = 1 in group 1 is different from id 1 in group 2. Again though, if you’re not being silly, this wouldn’t be an issue.↩ One reason to do so would be that you expect variability to decrease over time, e.g. due to experience. You might also allow that variance to be different due to some other grouping factor entirely (e.g. due to treatment group membership).↩ This feature request has been made by its users for over a decade at this point- it’s not gonna happen. The issue is that the way lmer works by default uses a method that won’t allow it (this is why it is faster and better performing than other packages). Unfortunately the only response to this issue is ‘use nlme’. However many other packages work with lme4 rather than nlme, and if you aren’t going to use lme4 for mixed models you might as well go Bayesian with rstanarm or brms instead of nlme. I would even prefer mgcv to nlme (though it can use nlme under the hood) because of the other capabilities it provides, and the objects created are easier to work with in my opinion.↩ Note that for a balanced binary variable, the mean p=.5 and standard deviation is sqrt(p*(1-p)) = .5↩ "],
["issues.html", "Issues Variance accounted for Alternative approaches to mixed models Sample sizes Model Comparison Convergence", " Issues This section just more or less talks about things that might come up, or at least regularly do so for those who use mixed models. Variance accounted for People really love the R-squared value that comes from standard regression. Never mind that it is inherently biased, nor does it matter that there is no way to state what would be a ‘good’ result for a given data situation, nor that many of these same people actually don’t know how to interpret it, nor does it even matter that the same kinds of folks have no qualms about dropping it from a report at the first sign of trouble. Suffice it to say that when there are multiple sources of ‘variance’, talking about variance accounted for is not straightforward. Still, many have tried. You might look at this package and the references noted in the description. See also the GLMM FAQ. I would suggest not even bothering beyond the standard linear mixed model. Alternative approaches to mixed models I have a document that goes into more detail about many approaches to dealing with clustered data, but we can briefly talk about some here. Common alternatives used in clustered data situations include: Fixed effects models (also panel linear models with fixed, as opposed to random, effects) Using cluster-robust standard errors Generalized estimating equations (GEE) The first two are commonly used by those trained with an econometrics perspective, while you might see GEE more with those of a biostatistics or other perspective. GEE are in fact a generalization of the cluster-robust approach, and extend generalized least squares (GLS) to nonlinear/GLM settings. The nature of fixed effects models allow you to control for, but not investigate, any cluster level effects. This makes them a non-starter for many investigations, as those are typically of prime theoretical interest. GEE approaches allow one to take into account the dependency in the data, but ignore what might be very interesting, i.e. the random effects and associated variance. There are also few tools for GEE in more complicated Covariance structures beyond a single clustering variable. Growth curve models With longitudinal data, growth curve models are a latent variable approach that is commonly used in these situations. With appropriate setup, they will duplicate the results of a mixed model. In my opinion, there are few reasons to use a growth curve approach over a mixed model, and many reasons not to, not least of which is that effects which would be simple to interpret in the mixed model approach are now a source of confusion to applied researchers in the growth curve model, even though it’s the same thing. Furthermore, indirect effects, growth mixture models and other extensions common in the latent variable approach are more easily implemented in the mixed model approach. In short, only the most complicated models would perhaps require a growth curve model, but would also bring with it many other complications. See more here. Sample sizes Small number of clusters Think about how many values of some variable you’d need before you felt comfortable with statistics based on it, especially standard deviation/variance. That’s at play with mixed models, in the sense you’d like to have enough groups to adequately assess the variance components. Mixed models will run with very small numbers, though the estimates will generally be biased. I have a demo here if interested. One way to deal with this is to move to the Bayesian context, which will automatically induce some regularization in parameter estimates. This also speaks to the issue some will have regarding whether they should treat something as a fixed vs. random effect. Historical definitions would unnecessarily restrict usage of random effects approaches. For example, random effects were defined to be a (random) sample from some population. If this were the case some might take issue when your levels do not deal with a sample, but the whole population, as in the case where your cluster is state and you have all 50 states. This doesn’t matter. If you have enough levels to consider a mixed model approach, feel free to do so. Small N within cluster Mixed models work even with no more than two in each cluster and some singletons. Even in the simple case of pre-post design, mixed models are entirely applicable, though limited (you can’t have random slopes). So whenever you have clustering of some kind, you should consider mixed models. Balanced/Missing values We’ve primarily been looking at balanced data, where each clusters have the same number of observations within them. There is no requirement for this, and in many cases we wouldn’t even expect it, e.g. people within geographical units. However, if data is only missing on the outcome, or a mix of variables, we essentially have the same issue as with typical data situations, and will have the same considerations for dealing with missingness. If you don’t lose much data, the practical gain by ignoring missingness generally outweighs the complexities that can come with, for example, multiple imputation20, even in the best of settings. By default, mixed models assume missing at random. On the other hand, longitudinal data has special considerations, as there is typically increasing dropout over time. Having dealt with missingness in a variety of contexts with different approaches (FIML, MI, Bayesian), the end result is usually that you spend vast amounts more time dealing with the missing data than you do understanding your models, and yet don’t feel any better about the results. Unless the missingness would make you lose a good chunk of the data, it’s probably best just to leave that to the limitations section of your report21. If you do deal with it, I’d suggest an approach that is essentially a one-off (e.g. with missForest) to be compared to the data that ignores the missingness, but still allows you to do everything you want. While you may not incorporate all sources of uncertainty in doing so, it seems to me a viable compromise. Big Data Mixed model packages are often not so great with largish data, e.g. thousands, coupled with anything beyond random intercepts. However, I’ve used lme4 with millions and simple structure,and 10s of thousands with complicated structure, and it does very well (at least for the gaussian case). For truly big data you’re not going to have a lot of options though. Furthermore, common techniques in machine learning have no implementation for the inclusion of something like random effects. While papers have been written, tools are practically non-existent (but see here (mebt specifically) and here). Most approaches in the ML world will simply throw the clustering variable in along with everything else, or have enough data to do by-cluster approaches, but this may not be interesting to those doing mixed models. On the plus side, if you’re willing to wait, tools like the Stan family will likely do just fine. Furthermore, the mgcv package has a big data implementation that might be useful for some models if lme4 doesn’t quite fit the modeling situation. So while massive data may still be problematic, you may be fine with very large data. Model Comparison Model comparison takes place in the usual way in the sense of potentially having statistical tests and information criteria. Unfortunately, the typical likelihood ratio tests one might use in standard settings are not so straightforward here. For example, at a minimum you’d have to change the default estimation from REML to ML, and the models must have the same random effects structure, in order to compare models with different fixed effects for the resulting test p-value to be correct. It works the other way to compare models with different random effects structure. In my opinion, model selection involves considerations of theory, parsimony, and prediction, and those tests do not. I’m not partial to such tests even in the standard setting, and would use AIC here to potentially aid (not make) a model choice if I thought it was necessary, as I would there22. In general though, trying to determine a ‘best’ model with one set of data is a problematic endeavor at best, and at worst, completely misguided. I think it’s very useful to build models of increasing complexity, and select one to focus on based on the available evidence. Just don’t get hung up on choosing one based solely on the outcome of a single statistic. If you have a lot of data, you should consider some sort of explicit validation approach if you really want to compare competing models, but that is not without complication given the dependency in the data. Convergence Data is as data does. It is not unlikely that you will have issues in conducting mixed models, such as lack of convergence, estimates of zero for the cluster variance, warnings about scaling variables etc. These are not easy models to estimate (at least outside of the Bayesian context), so don’t be surprised if all doesn’t go smoothly. A few common issues23 I see are: Lack of centering/standardizing will often result in scaling warnings for lme4. It makes sense to do it anyway, so the same goes for mixed models as any other. Zero estimates for the random effect variance, or \\(\\pm 1\\) estimates for correlation of intercepts and slopes, often can be attributed to not having enough data, not having enough clusters, or an overlooked data issue. You won’t have this issue in the Bayesian context, but in others, you may have to deal with the dependency in some other fashion (e.g. cluster-robust standard errors/GEE). Any complicated GLMM or similar model is likely to have problems, so be prepared. If you want to go beyond glm, you’ll have fewer tools and likely more issues. There are packages like ordinal, mgcv, glmmamdb, and others that can potentially handle alternate distributions and other complexities, however I think one would be better off with a Bayesian approach (e.g. brms/rstan). In practice, I’ve found others to be prohibitively slow, unable to converge, or to limited in post-estimation options. The main point is that you’ll need to acknowledge the warnings and messages that the packages provide, and be prepared to take necessary steps to deal with these issues when they arise. Multiple imputation is straightforward only in theory. In practice it becomes a major pain to go very far beyond getting the parameter estimates for simple models. Full information maximum likelihood (FIML) is little implemented outside of SEM software/packages, and more problematic in its assumptions.↩ Just note that in some disciplines, the reviewers, who will never actually do this themselves for the same reasons, nevertheless will make a big deal about the missing data because it’s an easy point for them to make. This is similar to economics reviewers who shout ‘endogeneity!’ at every turn, but won’t bother to tell you where to get the instrument in the first place, admit that IV analysis is problematic in its own right, or what the approach should be in complex model settings such as mixed models with nonlinear, spatial effects, multiple levels of clustering etc.↩ If you really want them see the lmertest package. Note also that AIC does not come with a free lunch. See the cAIC4 package and references therein.↩ The Richly Parameterized Linear Models text discusses convergence and other issues probably more than any other text I’ve come across. Most don’t treat the subject at all.↩ "],
["going-further.html", "Going Further Other distributions Other contexts Nonlinear Mixed Effects Connections", " Going Further This section covers topics that are generally beyond the scope of what would be covered in the workshop, but may be given their section over time. Other distributions As noted in the GLMM section, we are not held to use only GLM family distributions regarding the target variable. Unfortunately, the tools you have available to do so will quickly diminish. However, a couple packages could help in this regard with simpler random effects structures. For example, the mgcv package allows one access to a variety of response distributions, such as \\(t\\), negative binomial, beta, zero-inflated Poisson and more. If you only have random intercepts you might try it. If you’re willing to go Bayesian, you’ll have even more options with rstanarm and brms. I’ve personally had success with ordinal, beta, truncated normal and more with brms in particular. Note also that nothing says that the random effects must come from a normal distribution either. You probably are going to need some notably strong theoretical reasons for trying something else, but it does come up for some folks. You’ll almost certainly need to use a specialized approach, as most mixed model tools do not offer such functionality out of the box. Other contexts Here is a list of some other contexts in which you can find random effects models, or extensions of mixed models into other situations. Spatial models It is often the case we want to take into account the geography of a situation. Spatial random effects allow one to do so in the continuous case, e.g. with latitude and longitude coordinates, as well as discrete, as with state. Typical random effects approaches, e.g. with a state random effect, would not correlate state effects. One might capture geography incidentally, or via cluster level variables such as ‘region’ indicator. However, if you’re interested in a spatial random effect, use something that can account for it specifically. Survival models Random effects models in the survival context are typically referred to as frailty models. As a starting point, the survival package that comes with R can do such models. Item Response Theory Some IRT models can be estimated as a mixed model, or otherwise thought of as incorporating random effects. See Boeck et al. (2011) The Estimation of Item Response Models with the lmer Function from the lme4 Package in R. I also have some brief demonstration here. Multi-membership Sometimes observations may belong to more than one cluster of some grouping variable. For example, in a longitudinal setting some individuals may move to other cities or schools, staying in one place longer than another. Depending on the specifics of the modeling setting, you may need to take a multi-membership approach to deal with this. Phylogenetic models In biology, models make take observations that are of the same species. While one can use species as an additional source of variance, the species are not independent as they may come from the same phylogenetic tree/branch. Bayesian packages are available to do such models (e.g. MCMCglmm and brms). Adjacency structures Similar to spatial and phylogenetic models, the dependency among the groups/clusters themselves can be described in terms of a markov random field/undirected graph. In simpler terms, one may think of a situation where a binary adjacency matrix would denote connections among the nodes/cluster groups. For example, the clustering may be due to individuals, which themselves might be friends with one another. One way to deal with such a situation would be similar to spatial models for discrete random units. Gaussian Processes Gaussian processes are another way to handle dependency in the data, especially over time or space. Some spatial models are in fact a special case. One can think of gaussian processes as adding a ‘continuous category’ random effect. Consider the effect of age in many models, could that not also be a source of dependency regarding some outcomes? In Statistical Rethinking, McElreath has a nice chapter ‘Adventures in Covariance’ that gets into this a bit. Bayesian With mixed models we’ve been thinking of coefficients as coming from a distribution (normal). While we have what we are calling ‘fixed’ effects, the distinguishing feature of the mixed model is the addition of this random component. Now consider a standard regression model, i.e. no clustering. You can do the same thing, i.e. assume the coefficients are not fixed, but random. In this sense, the goal is to understand that distribution, and focus on it, rather than just the summary of it, e.g. the mean. However, the mean (or other central tendency) of that distribution can be treated like you’ve been doing the fixed effects in your standard models. Thus you can use how you’ve been thinking about the random effects in mixed models as a segue to the Bayesian approach, where all parameters are random. Using Bayesian versions of your favorite models takes no more syntactical effort than your standard models. The following is a standard linear regression and a mixed model in the brms package. brm(gpa ~ occasion, data=gpa) brm(Reaction ~ Days + (1 + Days|Subject), data=sleepstudy) So running the Bayesian models is not only as easy, the syntax is identical! Furthermore, just like mixed models allowed you to understand your data more deeply, the Bayesian models have the potential to do the same. Even the probabilities and intervals make more sense. With rstanarm and especially brms, you can do fairly complex models, taking you further than the standard mixed model packages, all without learning how to code the models explicitly in Stan. However, when you get to that point, the modeling possibilities are only limited by your imagination. You will have to learn a new inferential framework, as well as some of the nuances of the Markov Chain Monte Carlo (MCMC) approach. But you may be surprised to find that the basics come more easily than you would anticipate. Using tools like brms and related make it easier than ever to dive into Bayesian data analysis, and you’ve already been in a similar mindset with mixed models, so try it out some time. I have an introduction to Baysian analysis with Stan, and a bit more on the Bayesian approach and mixed models in this document. Surveys &amp; Mr. P Clustering is often a result of sampling design. Often one would use a survey design approach for proper inference in such situations. However, multi-level regression with post-stratification, or Mr. P, is an alternative mixed model approach that can potentially lead to better results in the same setting. One might even be able to generalize from a sample of Xbox players to the national level! Post-hoc comparisons and multiple testing This is not an issue I’m personally all that concerned with, but a lot of folks seem to be. The ‘problem’ is that one has a lot of p-values for some model or across a set of models, and is worried about spurious claims of significance. If one were truly worried about it, they’d be doing different models that would incorporate some sort of regularization, rather than attempting some p-value hack afterwards. Didn’t we talk about regularization somewhere? Yep, you can use a mixed model approach instead. See Gelman for details. Growth mixture models Often people will assume latent clusters of individuals within the data, with model effects differing by these latent groups also. Sometimes called latent trajectory models, these are conceptually adding a cluster analysis to the mixed model setting. While common in structural equation modeling, packages like flexmix can keep you in the standard model setting, which would be preferable. Nonlinear Mixed Effects Earlier we used the nlme package. The acronym stands for nonlinear mixed effects models. In this case, we are assuming a specific functional form for a predictor. A common example is a logistic growth curve24, and one could use a function like SSlogis. In other cases we do not specify the functional form, and take a more non-parametric approach. Here’s where the powerful mgcv package comes in, and there are few if any that have its capabilities for generalized additive models combined with standard random effects approaches as well. Depending on the approach you take, you can even get nlme or lme4 output along with the GAM results. Highly recommended. Connections The incorporation of spatial random effects, additive models, and mixed models altogether under one modeling roof is sometimes referred to as structured additive regression models, or STARs. The mgcv package is at least one place where you can pull this off. But the notion of a random effect is a broad one, and we might think of many such similar effects to add to a model. As mentioned previously, thinking of parameters as random, instead of fixed, essentially puts one in the Bayesian mindset. Moving to that world for your modeling will open up many doors, including expanding your mixed model options. Not to be confused with latent growth curve models or logistic regression.↩ "],
["summary-2.html", "Summary", " Summary The odds of you eventually coming across dependency in your data is very high. Using standard methods while ignoring the situation can lead to problematic inference. More to the point however, you’re missing out on a much richer story to tell with the data. One can estimate a variety of cluster-specific effects, incorporate multiple types of clustering, all while still be able to talk about global effects as well. One can also extend such models to other types of ‘random effects’ as well. With the right tools, even complicated mixed models can be fit relatively easily and quickly for even moderately large data sets. It does take some getting used to, but in the end can be a highly satisfying modeling approach. Use them the next time you encounter some dependency in your data. Best of luck with your research! "],
["appendix.html", "Appendix Data Programming languages Reference texts and other stuff", " Appendix Data Note that I have converted these from their original SPSS format to R data.frames saved within RData files. I also cleaned them up with better names/labels etc. For data sets used in that text, most of the description is taken from Joop Hox’s text appendix (‘Data Stories’). GPA: The GPA data are a longitudinal data set, where 200 college students have been followed 6 consecutive semesters. In this data set, there are GPA measures on 6 consecutive occasions, with a JOB status variable (how many hours worked) for the same 6 occasions. There are two student-level explanatory variables: the gender (1= male, 2= female) and the high school GPA. There is also a dichotomous student-level outcome variable, which indicates whether a student has been admitted to the university of their choice. Since not every student applies to a university, this variable has many missing values. pupils: Assume that we have data from 1000 pupils who have attended 100 different primary schools, and subsequently went on to 30 secondary schools. Similar to the situation where we have pupils within schools and neighborhoods, we have a cross-classified structure. Pupils are nested within primary and within secondary schools, with primary and secondary schools crossed. In other words: pupils are nested within the cross-classification of primary and secondary schools. In our example, we have a response variable achievement which is measured in secondary school. We have two explanatory variables at the pupil level: pupil gender (0 = male, 1 = female) and a six-point scale for pupil socioeconomic status, pupil ses. We have at the school level a dichotomous variable that indicates if the school is public (denom = 0) or denominational (denom = 1). Since we have both primary and secondary schools, we have two such variables (named pdenom for the primary school and sdenom for the secondary school). nurses: The data in this example are from a hypothetical study on stress in hospitals. The data are from nurses working in wards nested within hospitals. In each of 25 hospitals, four wards are selected and randomly assigned to an experimental and control condition. In the experimental condition, a training program is offered to all nurses to cope with job- related stress. After the program is completed, a sample of about 10 nurses from each ward is given a test that measures job-related stress. Additional variables are: nurse age (years), nurse experience (years), nurse gender (0 = male, 1 = female), type of ward (0 = general care, 1 = special care), and hospital size (0 = small, 1 = medium, 2 = large). This is an example of an experiment where the experimental intervention is carried out at the group level. In biomedical research this design is known as a cluster randomized trial. They are quite common also in educational and organizational research, where entire classes or schools are assigned to experimental and control conditions. Since the design variable Experimental versus Control group (ExpCon) is manipulated at the second (ward) level, we can study whether the experimental effect is different in different hospitals, by defining the regression coefficient for the ExpCon variable as random at the hospital level. In this example, the variable ExpCon is of main interest, and the other variables are covariates. Their function is to control for differences between the groups, which should be small given that randomization is used, and to explain variance in the outcome variable stress. To the extent that they are successful in explaining variance, the power of the test for the effect of ExpCon will be increased. Therefore, although logically we can test if explanatory variables at the first level have random coefficients at the second or third level, and if explanatory variables at the second level have random coefficients at the third level, these possibilities are not pursued. We do test a model with a random coefficient for ExpCon at the third level, where there turns out to be significant slope variation. This varying slope can be predicted by adding a cross-level interaction between the variables ExpCon and HospSize. In view of this interaction, the variables ExpCon and HospSize have been centered on their overall mean. sociometric: The sociometric data are intended to demonstrate a data structure where the cross-classification is at the lowest level, with an added group structure because there are several groups. The story is that in small groups all members are asked to rate each other on a scale of 1-9, where higher numbers indicate a more positive view of the individual (i.e. how much they would like to share some activity with the rated person). Each record is defined by the sender–receiver pairs, with explanatory variables age and sex defined separately for the sender and the receiver. The group variable ‘group size’ is added to this file. There are 20 groups, with sizes ranging from 4 to 11. speed dating: Data involve a speed dating experiment on a sample of a few hundred students in graduate and professional schools at Columbia University. In the speed dating events, the experiment randomly assigned each participant to ten short dates (four minutes) with participants of the opposite sex. For each date, each person rated six attributes (attractive, sincere, intelligent, fun, ambitious, shared interests) of the other person on a 10-point scale and wrote down whether he or she would like to see the other person again. The data have been filtered to remove constant responders, i.e. those who always or never wanted to see their partner again, those six attributes have scaled versions with mean 0 and standard deviation 1 (_sc), column names have been made useful, and only some of the variables have been kept for the demo. If you run the same model, you can get very similar estimates to that in the Fahrmeier et al. text, table 7.4 (though there is a typo for the Male effect). The data come from Gelman’s website but are based on this article. patents: The European Patent Office is able to protect a patent from competition for a certain period of time. The Patent Office has the task to examine inventions and to declare patent if certain prerequisites are fulfilled. The most important requirement is that the invention is something truly new. Even though the office examines each patent carefully, in about 80% of cases competitors raise an objection against already assigned patents. In the economic literature the analysis of patent opposition plays an important role as it allows one to (indirectly) investigate a number of economic questions. For instance, the frequency of patent opposition can be used as an indicator for the intensity of the competition in different market segments. The primary variables are: opp: Patent opposition (1=yes 0=no), biopharm: Patent from biotech/pharma sector, ustwin: US twin patent exists, patus: Patent holder from the USA, patgsgr: Patent holder from Germany, Switzerland, or Great Britain, year, ncit: Number of citations for the patent, ncountry: Number of designated states for the patent, and nclaims: Number of claims. Centered and other transformed variables are also present. In order to analyze objections against patents, a data set with 4,866 patents from the sectors biotechnology/pharmaceutics and semiconductor/computer was collected. The goal of one analysis is to model the probability of patent opposition, while using a variety of explanatory variables for the binary response variable patent opposition (yes/no). This corresponds to a regression problem with a binary response. In other cases you might wish to analyze the number of citations. Programming languages R R has more mixed modeling capabilities than anything else out there. Here are just a few options within R. lme4: generalized linear mixed models; extremely efficient nlme: (non-)linear mixed models but only for the gaussian case. mgcv: provides means to use both lme4 or nlme, extends distributional families, correlated residuals, and all that additive model stuff too ordinal: for various types of ordinal models rstanarm: Bayesian with lme4 level options brms: Bayesian with possibly the most extensive mixed model capabilities out there Python In Python, the statsmodels module has basic capabilities for mixed models but not too many frills (e.g. no crossed random effects). CSCAR directory Kerby Shedden has been part of this specific development. You can see his notes from the Data Science Skills Series here. Julia One of the lme4 authors develops a MixedModels package for Julia. Doug Bates is currently creating some notebooks (and possibly a full book) on implementation of mixed models in Julia. Proprietary Among the standard stats packages, I can only recommend Stata for both ease of implementation and flexibility in modeling. SAS and SPSS both have non-intuitive and needlessly verbose syntax, and, while SAS is a fairly good tool for mixed models (from my understanding), I’ve actually seen SPSS consistently struggle with even simple models, and its GUI interface, the only reason to use SPSS in the first place, is not even remotely intuitive. Mplus has a lot of functionality both for standard mixed models and growth curve models, though between lavaan, mediation, and the rest of R, there is little need to use Mplus except for very complicated multilevel SEM, which requires very large samples and a lot of theoretical justification, which most of the people doing SEM are typically lacking in one or the other. I will also say that there is no reason to use mixed model specific software like HLM. The days for such hijinks have long since passed. Reference texts and other stuff An excellent modeling book can be found in Data Analysis Using Regression and Multilevel/Hierarchical Models. You will learn a great deal about statistical modeling in general, as the mixed model stuff only comprises the second part. On the applied side, CSCAR’s own Brady West has a book- Linear Mixed Models: A Practical Guide Using Statistical Software. It shows examples in a variety of programming formats while not glossing over the details you need to know. Two texts come at mixed models from a very broad perspective, which I like. I find Fahrmeier et al. Regression - Models, Methods and Applications to be very good. It will also tie mixed models to spatial and nonparametric approaches. Richly Parameterized Linear Models - Additive, Time Series, and Spatial Models Using Random Effects, does as well, and provides some nice historical context and hits on practical issues you will encounter if you play with these models long enough. There is literally a book on mixed models with lme4 by Doug Bates, one of the developers. While dated with regard to lme4, it’s definitely not with regard to mixed models in general, and worth having around. Mixed model FAQ I have several other docs on various aspects of mixed models. There is a lot of good information on stackoverflow and cross validated Q &amp; A sites, where lme4 developer Ben Bolker has been quite active in answering people’s questions. "]
]
